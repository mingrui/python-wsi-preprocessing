import os
import csv
from matplotlib.pyplot import imshow

import deephistopath.wsi.slide as slide
import deephistopath.wsi.util as util
import deephistopath.wsi.filter as filter
import deephistopath.wsi.tiles as tiles


def slide_variable_setup(wsi_dir, output_dir, files_path, files_name):
    slide.BASE_DIR = wsi_dir

    slide.SRC_TRAIN_DIR = slide.BASE_DIR
    slide.DEST_TRAIN_DIR = os.path.join(
        output_dir, "training_" + slide.DEST_TRAIN_EXT)
    slide.DEST_TRAIN_THUMBNAIL_DIR = os.path.join(
        output_dir, "training_thumbnail_" + slide.THUMBNAIL_EXT)
    slide.FILTER_DIR = os.path.join(
        output_dir, "filter_" + slide.DEST_TRAIN_EXT)
    slide.FILTER_THUMBNAIL_DIR = os.path.join(
        output_dir, "filter_thumbnail_" + slide.THUMBNAIL_EXT)
    slide.TILE_SUMMARY_DIR = os.path.join(
        output_dir, "tile_summary_" + slide.DEST_TRAIN_EXT)
    slide.TILE_SUMMARY_ON_ORIGINAL_DIR = os.path.join(
        output_dir, "tile_summary_on_original_" + slide.DEST_TRAIN_EXT)
    slide.TILE_SUMMARY_THUMBNAIL_DIR = os.path.join(
        output_dir, "tile_summary_thumbnail_" + slide.THUMBNAIL_EXT)
    slide.TILE_SUMMARY_ON_ORIGINAL_THUMBNAIL_DIR = os.path.join(
        output_dir, "tile_summary_on_original_thumbnail_" + slide.THUMBNAIL_EXT)
    slide.TILE_SUMMARY_HTML_DIR = output_dir
    slide.TILE_DATA_DIR = os.path.join(output_dir, "tile_data")
    slide.TOP_TILES_DIR = os.path.join(
        output_dir,
        slide.TOP_TILES_SUFFIX +
        "_" +
        slide.DEST_TRAIN_EXT)
    slide.TOP_TILES_THUMBNAIL_DIR = os.path.join(
        output_dir,
        slide.TOP_TILES_SUFFIX +
        "_thumbnail_" +
        slide.THUMBNAIL_EXT)
    slide.TOP_TILES_ON_ORIGINAL_DIR = os.path.join(
        output_dir,
        slide.TOP_TILES_SUFFIX +
        "_on_original_" +
        slide.DEST_TRAIN_EXT)
    slide.TOP_TILES_ON_ORIGINAL_THUMBNAIL_DIR = os.path.join(
        output_dir,
        slide.TOP_TILES_SUFFIX +
        "_on_original_thumbnail_" +
        slide.THUMBNAIL_EXT)
    slide.TILE_DIR = os.path.join(
        output_dir,
        "tiles_" + slide.DEST_TRAIN_EXT)
    slide.STATS_DIR = os.path.join(output_dir, "svs_stats")

    slide.SLIDE_NAMES = files_name
    slide.SLIDE_PATH = files_path
    # slide.TRAIN_PREFIX = output_prefix


def tile_variable_setup(tile_size, zoom_level, num_of_tiles_per_slide):
    tiles.ROW_TILE_SIZE = tile_size
    tiles.COL_TILE_SIZE = tile_size
    tiles.ZOOM_LEVEL = zoom_level
    tiles.NUM_TOP_TILES = num_of_tiles_per_slide


def multiprocessing_pipeline(wsi_dir, output_dir, files_path, files_name, tile_size, zoom_level, num_tiles):
    """
    Call wsi-preprocessing multiprocess pipeline to work on specified folder

    Args:
        wsi_dir: directory containing wsi files
        output_dir: directory to output patch files to
        turtle_files: this is the list of files generated by py_wsi turtle
        tile_size: size of tile / patch, assuming always square
        zoom_level: zoom level of tile / patch, 0 would be lowest zoom level (ie. largest zoom)
                    at zoom_level 2, details are usually barely visible
    """
    slide_variable_setup(wsi_dir, output_dir, files_path, files_name)
    tile_variable_setup(tile_size, zoom_level, num_tiles)

    print('================START================')
    slide.multiprocess_training_slides_to_images()
    print('=====================================')
    filter.multiprocess_apply_filters_to_images()
    print('=====================================')
    tiles.multiprocess_filtered_images_to_tiles()
    print('=================END=================')


def filter_slide_entropy(wsi_dir, output_dir, files_path, files_name):
    """
    Filter out slide with very low entropy, for example slides that are outof focus has extremely low
    overall entropy

    Args:
        wsi_dir: directory containing wsi files
        output_dir: directory to output result to
        filepath_list: list of file paths to filter

    Returns:
        low_entropy_list: list of file with low entropy
    """
    slide_variable_setup(wsi_dir, output_dir, files_path, files_name)
    slide.multiprocess_training_slides_to_images()
    filter.multiprocess_apply_filters_to_images(filter_func=filter.apply_entropy_filter)

    filter.m_queue.put(None)
    with open(os.path.join(output_dir, 'low-entropy.csv'), 'w') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['slides with low entropy'])
        for s in iter(filter.m_queue.get, None):
            writer.writerow([s])


def file_stats(file_dir, file_name):
    """
    Print Stats from openslide and py-wsi. Show scaled image at the end.

    Args:
        file_dir: The directory containing wsi files.
        file_name: The wsi file name.
    """
    # info 1
    print('Openslide info:\n')
    slide.single_slide_info(os.path.join(file_dir, file_name))
    print('\n\n\n')
    # show image
    pil_img, large_h, large_w, new_h, new_w = slide.show_scaled_slide_image(
        os.path.join(file_dir, file_name))
    imshow(pil_img)
